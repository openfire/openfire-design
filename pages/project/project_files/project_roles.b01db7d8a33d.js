// Generated by CoffeeScript 1.3.3
(function() {
  var ProjectRoleInvite, ProjectRoleInviteAction, ProjectRoleInviteCollection, ProjectRoleInviteView, ProjectRolesPageController,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ProjectRoleInvite = (function(_super) {

    __extends(ProjectRoleInvite, _super);

    function ProjectRoleInvite() {
      return ProjectRoleInvite.__super__.constructor.apply(this, arguments);
    }

    ProjectRoleInvite.prototype.url = '/_api/v1/project_role_invite/';

    ProjectRoleInvite.prototype.defaults = {
      to_user: 0,
      from_user: 0,
      project: 0,
      role: '',
      custom: '',
      created: '',
      message: '',
      status: 's'
    };

    ProjectRoleInvite.prototype.initialize = function() {};

    return ProjectRoleInvite;

  })(Backbone.Model);

  ProjectRoleInviteAction = (function(_super) {

    __extends(ProjectRoleInviteAction, _super);

    function ProjectRoleInviteAction() {
      return ProjectRoleInviteAction.__super__.constructor.apply(this, arguments);
    }

    ProjectRoleInviteAction.prototype.url = '/_api/v1/project_role_invite_action/';

    ProjectRoleInviteAction.prototype.defaults = {
      status: 's'
    };

    ProjectRoleInviteAction.prototype.initialize = function() {};

    return ProjectRoleInviteAction;

  })(Backbone.Model);

  ProjectRoleInviteCollection = (function(_super) {

    __extends(ProjectRoleInviteCollection, _super);

    function ProjectRoleInviteCollection() {
      return ProjectRoleInviteCollection.__super__.constructor.apply(this, arguments);
    }

    ProjectRoleInviteCollection.prototype.model = ProjectRoleInvite;

    return ProjectRoleInviteCollection;

  })(Backbone.Collection);

  ProjectRoleInviteView = (function(_super) {

    __extends(ProjectRoleInviteView, _super);

    function ProjectRoleInviteView() {
      return ProjectRoleInviteView.__super__.constructor.apply(this, arguments);
    }

    ProjectRoleInviteView.prototype.initialize = function() {
      var row;
      this.newInvite = new ProjectRoleInvite({
        project: $.openfire.page_vars.project_id,
        from_user: $.openfire.page_vars.user_id
      });
      this.hiddenRows = ['a', 'c', 'd'];
      [
        (function() {
          var _i, _len, _ref, _results;
          _ref = this.hiddenRows;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            row = _ref[_i];
            _results.push($(this.el).find('.row-status-' + row).hide());
          }
          return _results;
        }).call(this)
      ];
      return $('.remove-team-member-btn').click(this.removeTeamMember);
    };

    ProjectRoleInviteView.prototype.el = $('#project-role-invites');

    ProjectRoleInviteView.prototype.events = {
      'click #save-project-role-invite-btn': 'saveNewInvite',
      'click .accept-invite-btn': 'acceptInvite',
      'click .decline-invite-btn': 'declineInvite',
      'click .cancel-invite-btn': 'cancelInvite',
      'change #project-role-invite-role': 'customRoleToggle',
      'change input': 'formChanged',
      'change select': 'formChanged',
      'change #show-all-role-invites': 'toggleAllRoleInvites'
    };

    ProjectRoleInviteView.prototype.render = function() {
      return alert('role invite render');
    };

    ProjectRoleInviteView.prototype.idForAction = function(attr) {
      return attr.match(/project-role-invite-(\d+)/)[1];
    };

    ProjectRoleInviteView.prototype.takeInviteAction = function(id, status, result, target) {
      var response;
      response = new ProjectRoleInviteAction({
        id: parseInt(id),
        status: status
      });
      response.url += id + '/';
      response.save();
      target.parents('tr').find('.role-invite-status').html(status);
      return target.parents('tr').find('.role-invite-status-display').html(result);
    };

    ProjectRoleInviteView.prototype.acceptInvite = function(event) {
      var id, target;
      target = $(event.currentTarget);
      id = this.idForAction(target.parents('tr').attr('id'));
      return this.takeInviteAction(id, 'a', 'Accepted', target);
    };

    ProjectRoleInviteView.prototype.declineInvite = function(event) {
      var id, target;
      target = $(event.currentTarget);
      id = this.idForAction(target.parents('tr').attr('id'));
      return this.takeInviteAction(id, 'd', 'Declined', target);
    };

    ProjectRoleInviteView.prototype.cancelInvite = function(event) {
      var id, target;
      target = $(event.currentTarget);
      id = this.idForAction(target.parents('tr').attr('id'));
      return this.takeInviteAction(id, 'c', 'Canceled', target);
    };

    ProjectRoleInviteView.prototype.setValue = function(key, val) {
      return this.newInvite.set(key, val);
    };

    ProjectRoleInviteView.prototype.saveNewInvite = function() {
      var result;
      this.newInvite.set('message', $('#project-role-invite-message').redactor().getCode());
      result = this.newInvite.save();
      alert('Saved! (refresh page)');
      return $('#role-invite-dlg').modal('hide');
    };

    ProjectRoleInviteView.prototype.customRoleToggle = function() {
      if ($('#project-role-invite-role').val() === 'c') {
        return $('#project-role-set-custom').show();
      } else {
        $('#project-role-invite-custom').val('');
        return $('#project-role-set-custom').hide();
      }
    };

    ProjectRoleInviteView.prototype.toggleAllRoleInvites = function(event) {
      var row, target;
      target = $(event.currentTarget);
      if (target.attr('checked')) {
        return $(this.el).find('tr').show();
      } else {
        return [
          (function() {
            var _i, _len, _ref, _results;
            _ref = this.hiddenRows;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              _results.push($(this.el).find('.row-status-' + row).hide());
            }
            return _results;
          }).call(this)
        ];
      }
    };

    ProjectRoleInviteView.prototype.removeTeamMember = function(event) {
      var id, target;
      target = $(event.currentTarget);
      id = target.attr('id').match(/remove-project-role-(\d+)/)[1];
      return $.openfire.api('POST', 'delete_project_role', 'id=' + id, function(response) {
        $('#project-teammate-' + id).remove();
        return alert('Removed.');
      }, function(response) {
        return alert('Error: ' + response.responseText);
      });
    };

    return ProjectRoleInviteView;

  })(OFBaseView);

  ProjectRolesPageController = (function() {

    function ProjectRolesPageController() {
      var _this = this;
      this.roleInviteDlg = null;
      this.roleRequestDlg = null;
      this.init = function() {
        $.openfire.views.role_invite_list = new ProjectRoleInviteView();
        return _this.initDialogs();
      };
      this.initDialogs = function() {};
    }

    return ProjectRolesPageController;

  })();

  window.ProjectRolesPageController = ProjectRolesPageController;

  $.openfire.controller_classes.project_roles_page = ProjectRolesPageController;

}).call(this);
